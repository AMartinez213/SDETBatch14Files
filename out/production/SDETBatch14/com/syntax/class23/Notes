Method Overriding:
    Method overriding allows us to have same methods in parent and child classes.
Why we should override a method:
    1. When we inherit from a class everything other than private methods and constructors is inherited if we
    don't like any method from the parent we can override.
    2. It helps us achieve polymorphism.
What is the syntax to override:
    1. First there must be a parent child relationship.
    2. In the child class just redefined the method.
Type casting in objects:
    As we can type cast in the primitive data types we can also type cast objects like storing the object of a child
    class in a variable of parent type.
Why we should type cast objects?
    With the help of type casting we can starting storing the objects of child classes in an array of type parent
What is the syntax to type cast?
    Its same as primitive type casting for example if we have an animal class and animal class has a child class Cat
    we can do
    Animal animal=new Cat();
    parent name[] arr={new child-class name()}
Polymorphism:
    polymorphism is the ability of a method to take on many forms based on the object or the parameters that we pass to
    the method.
Types of polymorphism:
    There are two types of polymorphism.
    1.Compile time/static/early binding or run time/dynamic or late binding.
    Compile time/static/early binding:
       When we use method overloading to achieve polymorphism it is called compile time polymorphism
    run time/dynamic or late binding:(Most common)
       When we use method overriding to achieve polymorphism then it's called run time polymorphism

Final Keyword:
    final keyword is just like any other keyword in java like class, package, void, etc.
    there are three main uses of final keyword
    1. If we use the final keyword with a class no other class can inherit from that class.
    2. If we use it with a method name no child class can override that method.
    3. If we use it with a field once the value has been assigned to that field no one can change its value afterwards